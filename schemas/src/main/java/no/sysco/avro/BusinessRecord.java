/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.sysco.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BusinessRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -330369498505552320L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BusinessRecord\",\"namespace\":\"no.sysco.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"common\",\"type\":{\"type\":\"record\",\"name\":\"Common\",\"fields\":[{\"name\":\"field\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BusinessRecord> ENCODER =
      new BinaryMessageEncoder<BusinessRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BusinessRecord> DECODER =
      new BinaryMessageDecoder<BusinessRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<BusinessRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<BusinessRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BusinessRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this BusinessRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a BusinessRecord from a ByteBuffer. */
  public static BusinessRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence id;
  @Deprecated public no.sysco.avro.Common common;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BusinessRecord() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param common The new value for common
   */
  public BusinessRecord(java.lang.CharSequence id, no.sysco.avro.Common common) {
    this.id = id;
    this.common = common;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return common;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: common = (no.sysco.avro.Common)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'common' field.
   * @return The value of the 'common' field.
   */
  public no.sysco.avro.Common getCommon() {
    return common;
  }

  /**
   * Sets the value of the 'common' field.
   * @param value the value to set.
   */
  public void setCommon(no.sysco.avro.Common value) {
    this.common = value;
  }

  /**
   * Creates a new BusinessRecord RecordBuilder.
   * @return A new BusinessRecord RecordBuilder
   */
  public static no.sysco.avro.BusinessRecord.Builder newBuilder() {
    return new no.sysco.avro.BusinessRecord.Builder();
  }

  /**
   * Creates a new BusinessRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BusinessRecord RecordBuilder
   */
  public static no.sysco.avro.BusinessRecord.Builder newBuilder(no.sysco.avro.BusinessRecord.Builder other) {
    return new no.sysco.avro.BusinessRecord.Builder(other);
  }

  /**
   * Creates a new BusinessRecord RecordBuilder by copying an existing BusinessRecord instance.
   * @param other The existing instance to copy.
   * @return A new BusinessRecord RecordBuilder
   */
  public static no.sysco.avro.BusinessRecord.Builder newBuilder(no.sysco.avro.BusinessRecord other) {
    return new no.sysco.avro.BusinessRecord.Builder(other);
  }

  /**
   * RecordBuilder for BusinessRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BusinessRecord>
    implements org.apache.avro.data.RecordBuilder<BusinessRecord> {

    private java.lang.CharSequence id;
    private no.sysco.avro.Common common;
    private no.sysco.avro.Common.Builder commonBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.sysco.avro.BusinessRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.common)) {
        this.common = data().deepCopy(fields()[1].schema(), other.common);
        fieldSetFlags()[1] = true;
      }
      if (other.hasCommonBuilder()) {
        this.commonBuilder = no.sysco.avro.Common.newBuilder(other.getCommonBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing BusinessRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(no.sysco.avro.BusinessRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.common)) {
        this.common = data().deepCopy(fields()[1].schema(), other.common);
        fieldSetFlags()[1] = true;
      }
      this.commonBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public no.sysco.avro.BusinessRecord.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public no.sysco.avro.BusinessRecord.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'common' field.
      * @return The value.
      */
    public no.sysco.avro.Common getCommon() {
      return common;
    }

    /**
      * Sets the value of the 'common' field.
      * @param value The value of 'common'.
      * @return This builder.
      */
    public no.sysco.avro.BusinessRecord.Builder setCommon(no.sysco.avro.Common value) {
      validate(fields()[1], value);
      this.commonBuilder = null;
      this.common = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'common' field has been set.
      * @return True if the 'common' field has been set, false otherwise.
      */
    public boolean hasCommon() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'common' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public no.sysco.avro.Common.Builder getCommonBuilder() {
      if (commonBuilder == null) {
        if (hasCommon()) {
          setCommonBuilder(no.sysco.avro.Common.newBuilder(common));
        } else {
          setCommonBuilder(no.sysco.avro.Common.newBuilder());
        }
      }
      return commonBuilder;
    }

    /**
     * Sets the Builder instance for the 'common' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public no.sysco.avro.BusinessRecord.Builder setCommonBuilder(no.sysco.avro.Common.Builder value) {
      clearCommon();
      commonBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'common' field has an active Builder instance
     * @return True if the 'common' field has an active Builder instance
     */
    public boolean hasCommonBuilder() {
      return commonBuilder != null;
    }

    /**
      * Clears the value of the 'common' field.
      * @return This builder.
      */
    public no.sysco.avro.BusinessRecord.Builder clearCommon() {
      common = null;
      commonBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BusinessRecord build() {
      try {
        BusinessRecord record = new BusinessRecord();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (commonBuilder != null) {
          record.common = this.commonBuilder.build();
        } else {
          record.common = fieldSetFlags()[1] ? this.common : (no.sysco.avro.Common) defaultValue(fields()[1]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BusinessRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<BusinessRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BusinessRecord>
    READER$ = (org.apache.avro.io.DatumReader<BusinessRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
